# Составить python модуль с входной точкой для запуска скрипта и центральной функцией main. 
# В главной финкции нужно визвать другую функцию и передать ей 21 числових позиционних аргументов. 
# Поименованними аргументами передать 5 ключей. Из позиционних аргументов сформировать равние спискики, 
# и сгенерировать словарь, ключами которого будут поименованние аргументи, а значениями=, 
# полученние ранее списки. Результат должен бить записанв json файл. Все оформить в функции, 
# хардкод не допускаеться. Не забивать про принцип, единственной ответственности!

# 1. Организовиваете точку входа.
# 2. В точке входа передаете главную функцию.
# 3. Создаете какую-то функцию some_func, которая будет принимать позиционние и поименованние 
# аргументи (привильно организавать прием аргументов через args и kwargs). Єта функция должна 
# поровну разделить все позиционние аргументи на списки с равним количеством єлементов, чтоби 
# хватило для всех ключей, и она же должна создать словарь, ключами которого будут поименованние 
# аргументи, а значениями, полученние ранее списки. Функция должна вернуть словарь
# 4. Создать еще одну функцию load_dict(some_dict, json_path), которая принимает словарь и путь 
# к json файлу. Функция загружает словарь в соответствующий файл.
# 5. В главной функции визиваете, ранее созданную функцию some_func, передаете в нее 21 позиционний 
# аргумент (21 задано специально, чтоби получить некратное значение) и 5 поименованних аргументов 
# (имя аргумента равно самому значению ), пример, some_func(1,2,3,4,5, name = ‘name’, make = ‘make’).
# 6. Результати функции some_func присваиваете какой-то переменной и прокидиваете ее в функцию 
# load_dict, в єту же функцию передаете и путь
# 7 Результат скрипт сгенерирует json файл, с соответствующим контетном, например {‘name’: [1, 2], ‘make’: [3, 4]}

import json

def some_func (*args, **kwargs):
    dict_result = {}
    item = 0
    for k, v in kwargs.items():
        list_result = [args[i] for i in range(len(args)) if i % len(kwargs) == item]
        item += 1
        dict_result.update({v: list_result})
    return(dict_result)
            
def load_dict(some_dict, json_path):
    with open(json_path, 'w', encoding='UTF-8') as file:
        json.dump(some_dict, file)

def main():
    dict_ = some_func(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
                       name1='name1', name2='name2', name3='name3', name4='name4', name5='name5')
    path_ = './HW13_.json'
    load_dict(dict_, path_)
        
if __name__ == "__main__":
    main()
